#summary The logic of the java classes for the iterative reading data.

= Introduction =

This page describes Java classes, which are needed for the iterative reading data from the stream of SAX events. On this page you can find out how these classes work together.


= Details =

*1.* Create an instance of _ComponentFacade_. _ComponentFacade_ - interface, which provides _Smooks-functionality_ for _Talend-component_. This interface will be a primary facade that will be used by Talend-Smooks jobs at runtime.

{{{
org.sopera.di.smooks.ComponentFacade inputFlow = org.sopera.di.smooks.ComponentFacade.INSTANCE;
}}}

*2.* Then we set _path_ for tag (which is necessary for reading the needed data) with help of method _*setXPath()*_. Method _*setXPath()*_ have a string parameter with the path to the tag, which we need. This parameter will be a key in the _*HashMap<>*_ and will point to the _*SAXLocation*_ (which indicates the position in the document). 

{{{
inputFlow.setXPath("/Order/header");
inputFlow.setXPath("/Order/customer-details");
inputFlow.setXPath("/Order/order-item");
inputFlow.setXPath("/Order/order-item");
}}}

If the string that we passed as a parameter is already present in the _*HashMap<>*_ as a key, then we just finish the work of our function. Otherwise, we check that the string was not equal to null and divide it into parts. Then we form _*SAXLocation*_ with the help of these parts. We put in compliance _*loopPath*_ and _*SAXLocation*_ and puts them into a _*HashMap<>*_.

*3.* With the help of methods _*setMapping()*_ and _*setEDI()*_ we set the stream of mapping file and the stream of _EDI-data_ file.

{{{
inputFlow.setMapping(getClass().getResourceAsStream(
				"/smooks-mapping.xml"));
inputFlow.setEDI(getClass().getResourceAsStream(
				"/smooks.edi"));
}}}

*4.* Then we call the method _*start()*_. 

{{{
inputFlow.start();
}}}

In this method we call the methods of _*EDIProcess*_ (basic interface for organize the thread, with uses the smooks to transform the data from _EDI-massage_ to the _SAX-events_ flow) _*setMapping()*_ to set the mapping, _*setRes()*_ to set the _*StringTags*_ (contains _*HashMap<>*_ with the names of tags and corresponding to these names _*SAXLocations)*_, _*setXPaths()*_ to set the _XPath_, _*setEdi()*_ to set the stream of _EDI-message_ file. Then we run the writing thread.

{{{
this.parser.setMapping(mapping);
this.parser.setRes(res);
this.parser.setXPaths(xPaths);
this.parser.setEdi(EDI);

writer = new Thread(parser);
writer.start();
}}}

*5.* Invoke method _*startRead()*_ from _*StringTags*_ interface.

{{{
inputFlow.startRead();
}}}

This method checks the boolean variable _*state*_, which indicates whether we have to read the data structure (in this case _*state = true*_) or to write to it (_*state = false*_). If we need to write into a data structure, then we'll stop the thread of reading.

{{{
if (!state) {
    try {
        wait();
   } catch (InterruptedException e) {}
}}}

*6.* In the thread, which is responsible for recording of the data, we call the method _*parse()*_.

{{{
parser.parse(new InputSource(edi));
}}}

This method starts parsing our _EDI-file_. If we find element  in the document, which corresponds to one of the given _XPath_, we write it to our data structure  
with the help of method _*write()*_ of interface _*StringTags*_.

{{{
res.write();
}}}

After we recorded the necessary data we suspend the writing thread and resume the thread of reading. 

{{{
res.endWrite();
}}}

*7.* In the thread of reading we start the loop of data transmission. After reading the data we stop the flow of reading again and start the thread of writing and we do so until the end of _EDI-file_ is reached. The loop will continue until the state of our data structure will equal *end*. This state indicates whether the end of the stream is reached. We check this state using the method _*isEnd()*_ from interface _*StringTags*_, and set it using the method _*setEnd()*_.

{{{
while (!inputFlow.isEndOfFlow()) { 
   inputFlow.next();
}}}

After that we finish the thread of writing and the thread of reading.